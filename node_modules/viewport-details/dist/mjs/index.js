export var ScrollDirectionX;
(function (ScrollDirectionX) {
    ScrollDirectionX[ScrollDirectionX["Left"] = -1] = "Left";
    ScrollDirectionX[ScrollDirectionX["None"] = 0] = "None";
    ScrollDirectionX[ScrollDirectionX["Right"] = 1] = "Right";
})(ScrollDirectionX || (ScrollDirectionX = {}));
export var ScrollDirectionY;
(function (ScrollDirectionY) {
    ScrollDirectionY[ScrollDirectionY["Up"] = -1] = "Up";
    ScrollDirectionY[ScrollDirectionY["None"] = 0] = "None";
    ScrollDirectionY[ScrollDirectionY["Down"] = 1] = "Down";
})(ScrollDirectionY || (ScrollDirectionY = {}));
// A psuedo element is used to calculate heightCollapsedControls as the window.height value changes
// on iOS as the user scrolls and the browser chrome shrinks
let vhElement;
// State
let state;
/**
 * Gets the current state of the viewport
 * @returns ViewportDetails
 */
export function getViewportDetails() {
    setDetails();
    return state;
}
/**
 * Updates the details
 */
function setDetails() {
    let previous;
    if (state) {
        previous = { ...state };
        delete previous.previous;
        delete previous.changed;
    }
    else {
        vhElement = addHeightElement();
    }
    // Get current
    const width = window.innerWidth;
    const height = window.innerHeight;
    const heightCollapsedControls = vhElement.offsetHeight;
    const scrollX = window.pageXOffset;
    const scrollY = window.pageYOffset;
    const resized = previous ? previous.width !== width || previous.height !== height : false;
    const scrolled = previous ? previous.scrollX !== scrollX || previous.scrollY !== scrollY : false;
    state = {
        width,
        height,
        heightCollapsedControls,
        scrollX,
        scrollY,
        scrollDirectionX: previous ? getScrollDirection(previous.scrollX, scrollX) : ScrollDirectionX.None,
        scrollDirectionY: previous ? getScrollDirection(previous.scrollY, scrollY) : ScrollDirectionY.None,
        resized,
        scrolled,
        changed: resized || scrolled,
        previous,
    };
}
/**
 * Adds a HTML element to the view that is the exact same height as the viewport. This is used for calculating the height of the element if
 * the viewport controls were collapsed
 * @returns HTMLElement
 */
function addHeightElement() {
    const id = 'viewport-details-height-element';
    let element = document.getElementById(id);
    if (!element) {
        element = document.createElement('div');
        element.id = id;
        element.style.position = 'fixed';
        element.style.height = '100vh';
        document.documentElement.appendChild(element);
    }
    return element;
}
/**
 * Gets the direction in which the user is scrolling
 */
function getScrollDirection(previous, current) {
    if (previous < current) {
        return 1;
    }
    if (previous > current) {
        return -1;
    }
    return 0;
}
